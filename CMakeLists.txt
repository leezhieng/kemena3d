cmake_minimum_required(VERSION 3.16)

project(Kemena3dSdk
    VERSION 0.0.1
    DESCRIPTION "Kemena3D SDK"
    LANGUAGES CXX
)

# C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Option to build shared or static library
option(BUILD_SHARED_LIBS "Build as shared library" OFF)

# Optional MinGW flag (set via -G)
if(WIN32)
    option(USE_MINGW "Use MinGW on Windows" OFF)
    if(USE_MINGW)
        message(STATUS "Using MinGW")
        add_definitions(-DUSE_MINGW)
    else()
        message(STATUS "Using MSVC")
        add_definitions(-DUSE_MSVC)
    endif()
endif()

# Collect core source and header files
file(GLOB_RECURSE SRC_FILES ${CMAKE_CURRENT_SOURCE_DIR}/Source/src/*.cpp)
file(GLOB_RECURSE HEADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/Source/include/*.h)

# Collect AngelScript add_on sources, and remove generateheader.cpp (which defines main)
file(GLOB_RECURSE ANGELSCRIPT_SRC ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/add_on/*.cpp)
list(REMOVE_ITEM ANGELSCRIPT_SRC "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/add_on/scriptbuilder/generateheader.cpp")
file(GLOB_RECURSE ANGELSCRIPT_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/add_on/*.h)

# ImGui sources
file(GLOB IMGUI_SRC ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/imgui/*.cpp)
file(GLOB IMGUI_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/imgui/*.h)
file(GLOB IMGUI_BACKENDS
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/imgui/backends/imgui_impl_sdl.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/imgui/backends/imgui_impl_opengl3.cpp
)

# ImGuizmo sources
file(GLOB IMGUIZMO_SRC ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/imguizmo/*.cpp)
file(GLOB IMGUIZMO_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/imguizmo/*.h)

# Create library target
add_library(kemena3d ${SRC_FILES} ${HEADER_FILES} ${ANGELSCRIPT_SRC} ${ANGELSCRIPT_HEADERS} ${IMGUI_SRC} ${IMGUI_HEADERS} ${IMGUI_BACKENDS} ${IMGUIZMO_SRC} ${IMGUIZMO_HEADERS})

set_target_properties(kemena3d PROPERTIES
    VERSION ${PROJECT_VERSION}
    PUBLIC_HEADER "${HEADER_FILES}"

    # Debug build output
    ARCHIVE_OUTPUT_DIRECTORY_DEBUG   "${CMAKE_BINARY_DIR}/Output/lib/Debug"
    LIBRARY_OUTPUT_DIRECTORY_DEBUG   "${CMAKE_BINARY_DIR}/Output/lib/Debug"
    RUNTIME_OUTPUT_DIRECTORY_DEBUG   "${CMAKE_BINARY_DIR}/Output/lib/Debug"

    # Release build output
    ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Output/lib/Release"
    LIBRARY_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Output/lib/Release"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Output/lib/Release"
)

# Include directories
target_include_directories(kemena3d
    PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/Source/include
		${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/imgui
		${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/imgui/backends
        ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/angelscript/include
        ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/add_on
        ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/sdl/include
        ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/glew/include
        ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/assimp/include
        ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/glm
        ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/stb
        ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/nlohmann/include
		${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/portable-file-dialogs
		${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/imguizmo
)

# Link directories (per-config)
link_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/sdl/build_$<CONFIG>
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/build_$<CONFIG>
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/assimp/build_$<CONFIG>
)

# Definitions and static linking behavior
if (NOT BUILD_SHARED_LIBS)
    target_compile_definitions(kemena3d PRIVATE GLEW_STATIC)
    set(GLEW_LIB glew32s)
else()
    set(GLEW_LIB glew32)
endif()

# Use GLEW for imgui
target_compile_definitions(kemena3d PRIVATE IMGUI_IMPL_OPENGL_LOADER_GLEW)

# Platform specific
if (WIN32)
	target_link_libraries(kemena3d PUBLIC opengl32)
    target_compile_definitions(kemena3d PRIVATE _WINDOWS)
	if (NOT BUILD_SHARED_LIBS)
		target_compile_definitions(kemena3d PUBLIC KEMENA3D_STATIC)
	endif()
	# Define export macro only for shared builds
    if (BUILD_SHARED_LIBS)
        target_compile_definitions(kemena3d PRIVATE KEMENA3D_EXPORTS)
    endif()
elseif (APPLE)
    find_library(COCOA_LIBRARY Cocoa)
    find_library(OpenGL_LIBRARY OpenGL)
    target_link_libraries(kemena3d PUBLIC ${COCOA_LIBRARY} ${OpenGL_LIBRARY})
    target_compile_definitions(kemena3d PRIVATE _MACOS)
elseif (UNIX)
    find_package(OpenGL REQUIRED)
    find_package(X11 REQUIRED)
    target_link_libraries(kemena3d PUBLIC ${OPENGL_LIBRARIES} ${X11_LIBRARIES})
    target_compile_definitions(kemena3d PRIVATE _LINUX)
endif()

# Link libraries
target_link_libraries(kemena3d
    PUBLIC
		$<IF:$<CONFIG:Debug>,
            ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/build_Debug/libangelscript.dll.a,
            ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/build_Release/libangelscript.dll.a
        >
		$<IF:$<CONFIG:Debug>,
            ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/sdl/build_Debug/libSDL3.dll.a,
            ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/sdl/build_Release/libSDL3.dll.a
        >
        $<IF:$<CONFIG:Debug>,
            ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/assimp/build_Debug/libassimp.dll.a,
            ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/assimp/build_Release/libassimp.dll.a
        >
        ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/glew/lib/Release/x64/${GLEW_LIB}.lib
)

# Suppress some noisy warnings
target_compile_options(kemena3d PRIVATE -Wno-deprecated-declarations)

# Visual Studio startup project
if (MSVC)
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT kemena3d)
endif()

include(GNUInstallDirs) # defines CMAKE_INSTALL_INCLUDEDIR=include, LIBDIR=lib

# Install libraries → into lib/<CONFIG>
install(TARGETS kemena3d
    EXPORT kemena3dTargets
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION lib
    PUBLIC_HEADER DESTINATION include/kemena
)

# Headers (always into Output/include)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/imgui/
    DESTINATION include FILES_MATCHING PATTERN "*.h*"
)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/imgui/backends/
    DESTINATION include/backends FILES_MATCHING PATTERN "*.h*"
)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/angelscript/include/
    DESTINATION include FILES_MATCHING PATTERN "*.h*"
)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/add_on/
    DESTINATION include FILES_MATCHING PATTERN "*.h*"
)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/sdl/include/SDL3/
    DESTINATION include/SDL3 FILES_MATCHING PATTERN "*.h*"
)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/glew/include/GL/
    DESTINATION include/GL FILES_MATCHING PATTERN "*.h*"
)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/assimp/include/assimp/
    DESTINATION include/assimp FILES_MATCHING PATTERN "*.h*" PATTERN "*.inl"
)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/glm/glm/
    DESTINATION include/glm FILES_MATCHING PATTERN "*.h*" PATTERN "*.inl"
)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/stb/
    DESTINATION include/stb FILES_MATCHING PATTERN "*.h*"
)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/nlohmann/include/nlohmann/
    DESTINATION include/nlohmann FILES_MATCHING PATTERN "*.h*"
)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/portable-file-dialogs/
    DESTINATION include FILES_MATCHING PATTERN "*.h*"
)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/imguizmo/
    DESTINATION include FILES_MATCHING PATTERN "*.h*"
)
#install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/jolt/Jolt/
#	DESTINATION Output/include/jolt FILES_MATCHING PATTERN "*.h" PATTERN "*.hpp")
#install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/recast/Recast/include/
#	DESTINATION Output/include/recast/Recast FILES_MATCHING PATTERN "*.h" PATTERN "*.hpp")
#install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/recast/Detour/include/
#	DESTINATION Output/include/recast/Detour FILES_MATCHING PATTERN "*.h" PATTERN "*.hpp")

# Dependency libs (per-config into Output/lib/{Debug,Release})
file(GLOB_RECURSE LIBS_DEBUG
    "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/**/build_Debug/*.lib"
    "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/**/build_Debug/*.a"
    "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/**/build_Debug/*.dll"
	"${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/angelscript/projects/**/build_Debug/*.lib"
    "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/angelscript/projects/**/build_Debug/*.a"
    "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/angelscript/projects/**/build_Debug/*.dll"
)
file(GLOB_RECURSE LIBS_RELEASE
	"${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/**/build_Release/*.lib"
    "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/**/build_Release/*.a"
    "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/**/build_Release/*.dll"
    "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/angelscript/projects/**/build_Release/*.lib"
    "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/angelscript/projects/**/build_Release/*.a"
    "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/angelscript/angelscript/projects/**/build_Release/*.dll"
)
install(FILES ${LIBS_DEBUG}   DESTINATION lib   CONFIGURATIONS Debug)
install(FILES ${LIBS_RELEASE} DESTINATION lib	CONFIGURATIONS Release)

# GLEW is special (not per-config, it’s in Release/x64)
file(GLOB GLEW_LIBS
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/glew/lib/Release/x64/*.lib
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/glew/lib/Release/x64/*.dll
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/glew/lib/Release/x64/*.a
)
install(FILES ${GLEW_LIBS} DESTINATION lib)